#!/usr/bin/env bash

# Array of dependencies
dependencies=("flameshot" "xdotool" "xclip")

# Function to check if a dependency is installed
check_dependency() {
	if pacman -Qs "$1" >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

# Variable to track if all dependencies are installed
all_dependencies_installed=true

# Iterate over dependencies and check if they are installed
for dependency in "${dependencies[@]}"; do
	if ! check_dependency "$dependency"; then
		all_dependencies_installed=false
		break
	fi
done

# If all dependencies are already installed, exit the script
if [ "$all_dependencies_installed" == false ]; then
	# Check if a package manager is available
	if command -v paru >/dev/null 2>&1; then
		package_manager="paru"
	elif command -v yay >/dev/null 2>&1; then
		package_manager="yay"
	else
		echo "Neither yay nor paru package managers are installed."
		exit 1
	fi

	# Install missing dependencies
	for dependency in "${dependencies[@]}"; do
		if ! check_dependency "$dependency"; then
			if [ "$package_manager" == "yay" ]; then
				yay -Syu --needed --noconfirm "$dependency"
			elif [ "$package_manager" == "paru" ]; then
				paru -Syu --needed --noconfirm "$dependency"
			else
				exit 1
			fi
		fi
	done
fi

select_window_to_screenshot() {
	window_id=$(xdotool selectwindow)

	unset WINDOW X Y WIDTH HEIGHT SCREEN
	eval "$(xdotool getwindowgeometry --shell "$window_id")"

	xdotool windowfocus --sync "${window_id}"
	sleep 0.05

	flameshot gui --raw --region "${WIDTH}x${HEIGHT}+${X}+${Y}"
}

select_window_to_screenshot_save() {
	window_id=$(xdotool selectwindow)

	unset WINDOW X Y WIDTH HEIGHT SCREEN
	eval "$(xdotool getwindowgeometry --shell "$window_id")"

	xdotool windowfocus --sync "${window_id}"
	sleep 0.05

	flameshot gui --region "${WIDTH}x${HEIGHT}+${X}+${Y}"
}

copy_screenshot() {
	screenshot_options=(
		" fullscreen"
		" trim"
		" window"
	)

	selected_option=$(printf '%s\n' "${screenshot_options[@]}" | dmenu -p "")

	case "$selected_option" in
	" fullscreen")
		flameshot full --delay 3000 --raw | convert png:- -trim png:- | xclip -selection clipboard -target image/png
		;;
	" trim")
		flameshot gui --raw | convert png:- -trim png:- | xclip -selection clipboard -target image/png
		;;
	" window")
		select_window_to_screenshot | xclip -selection clipboard -target image/png
		;;
	esac
}

save_screenshot() {
	screenshot_options=(
		" fullscreen"
		" trim"
		" window"
	)

	selected_option=$(printf '%s\n' "${screenshot_options[@]}" | dmenu -p "")

	case "$selected_option" in
	" fullscreen")
		flameshot full --delay 3000 | convert png:- -trim png:- | xclip -selection clipboard -target image/png
		;;
	" trim")
		flameshot gui | convert png:- -trim png:- | xclip -selection clipboard -target image/png
		;;
	" window")
		select_window_to_screenshot_save | xclip -selection clipboard -target image/png
		;;
	esac
}

screenshot_mode=(
	" copy"
	" save"
)

selected_mode=$(printf '%s\n' "${screenshot_mode[@]}" | dmenu -p "")

case "$selected_mode" in
" copy")
	copy_screenshot
	;;
" save")
	save_screenshot
	;;
esac
