#!/usr/bin/env bash

# Array of dependencies
dependencies=("paru" "grep" "sed" "readline")

# Function to check if a dependency is installed
check_dependency() {
	if pacman -Qs "$1" >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

# Variable to track if all dependencies are installed
all_dependencies_installed=true

# Iterate over dependencies and check if they are installed
for dependency in "${dependencies[@]}"; do
	if ! check_dependency "$dependency"; then
		all_dependencies_installed=false
		break
	fi
done

# If all dependencies are already installed, exit the script
if [ "$all_dependencies_installed" == false ]; then
	# Check if a package manager is available
	if command -v paru >/dev/null 2>&1; then
		package_manager="paru"
	elif command -v yay >/dev/null 2>&1; then
		package_manager="yay"
	else
		echo "Neither yay nor paru package managers are installed."
		exit 1
	fi

	# Install missing dependencies
	for dependency in "${dependencies[@]}"; do
		if ! check_dependency "$dependency"; then
			if [ "$package_manager" == "yay" ]; then
				yay -Syu --needed --noconfirm "$dependency"
			elif [ "$package_manager" == "paru" ]; then
				paru -Syu --needed --noconfirm "$dependency"
			else
				exit 1
			fi
		fi
	done
fi

package_exists=$(paru -Ss "$1" || pacman -Ss "$1" | grep -E "^extra|^community|^multilib|^core|^aur" | grep -o "$1")
output="$("$@" 2>&1)"
error_message=$(echo "$output" | sed -n 's/.*: \(.*: .*\)$/\1/p')

search_output=$(paru -Ss "$1")
mapfile -t package_names < <(echo "$search_output" | grep -Po '^aur/\K[^ ]+' | grep -E "$1.*")
mapfile -t vote_numbers < <(echo "$search_output" | grep -Po '\[\+\K[0-9]+')

max_index=0
for i in "${!vote_numbers[@]}"; do
	if (("${vote_numbers[i]}" > "${vote_numbers[max_index]}")); then
		max_index=$i
	fi
done

package_to_install=${package_names[max_index]}

check_command_exists() {
	if ! (command -v "$1" >/dev/null 2>&1); then
		if [[ "$package_exists" ]]; then
			printf "%s\n\n" "$error_message"

			read -r -n 1 -p "$(echo -e "Do you want to install (${package_to_install})? \033[32mY\033[0m/\033[31mn\033[0m: ")" answer
			if [[ "$answer" =~ ^[Yy]?$ ]]; then
				printf "\n" && paru -Syu "$package_to_install"
				"$package_to_install" &
				"$1" &
			fi
		else
			printf "%s\n" "$error_message"
		fi
	fi
}

check_command_exists "$1"
