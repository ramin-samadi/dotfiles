#░█░█░▀█▀░▀█▀░█░░░▀█▀░▀█▀░▀█▀░█▀▀░█▀▀
#░█░█░░█░░░█░░█░░░░█░░░█░░░█░░█▀▀░▀▀█
#░▀▀▀░░▀░░▀▀▀░▀▀▀░▀▀▀░░▀░░▀▀▀░▀▀▀░▀▀▀
backup() {
  sudo rsync -aAXv --delete --exclude=/dev/* --exclude=/proc/* --exclude=/sys/* --exclude=/tmp/* --exclude=/run/* --exclude=/mnt/* --exclude=/media/* --exclude="swapfile" --exclude="lost+found" --exclude=".cache" --exclude="Downloads" --exclude=".VirtualBoxVMs" --exclude="var/lib/libvirt/images/*" --exclude=".ecryptfs" / /mnt/backup_destination/
}

command_not_found_handle() {
	"$HOME/.local/bin/command-finder" "$1"
	return $?
}

yt-dlp-mp3() {
  yt-dlp --extract-audio --audio-format mp3 --audio-quality 0 "$1"
}

share() {
  EXAMPLE_FILE=$(\ls -ap | grep -v / | head -n 1)
  FILE_SHARE_LINK=$(curl -s -F"file=@$1" 0x0.st)
  if [[ "$FILE_SHARE_LINK" ]]; then
    echo -e "\033[4m\033[34m$FILE_SHARE_LINK\033[0m\033[0m copied to clipboard"
    echo "$FILE_SHARE_LINK" | tr -d '\n' | xclip -selection clipboard
  else
    echo -e "Specify a file to share, example:\n    \033[35mshare\033[0m \033[34m$EXAMPLE_FILE\033[0m"
  fi
}

copy-file() {
  if [ -f "$1" ]; then
    xclip -selection clipboard <"$1"
    echo "File copied to clipboard."
  else
    echo "Error: File does not exist."
    exit 1
  fi
}

generate-font() {
  if [[ "$1" == "--block" || "$1" == "-b" ]]; then
    generate-font "$2" | grep "░" | tail -n 3
  else
    find /usr/share/figlet -type f \( -name "*.flf" -o -name "*.tlf" \) -exec sh -c '
      font=$(basename "$0" | sed "s/\.[^\.]*$//")
      toilet -f "$font" "${1}"  2>/dev/null
    ' {} "${1}" \;
  fi
}

get-function() {
  FUNCTION_NAME="$1"
  FILE_PATH="$2"

  sed -n '/^'"${FUNCTION_NAME}"'() {/,/^}/p' "${FILE_PATH}"
  sed -n '/^function '${FUNCTION_NAME}'() {/,/^}/p' "${FILE_PATH}"
}

#░█░█░█▀▀░█░█░█▀▄░▀█▀░█▀█░█▀▄░█▀▀
#░█▀▄░█▀▀░░█░░█▀▄░░█░░█░█░█░█░▀▀█
#░▀░▀░▀▀▀░░▀░░▀▀░░▀▀▀░▀░▀░▀▀░░▀▀▀
search_history() {
	echo "$(history | cut -c 8- | fzf)" | tr -d '\n' | xclip -selection clipboard && xdotool key --clearmodifiers ctrl+shift+v
}

edit_config() {
  CONFIGURATION_FILES=(
    "$HOME/.bashrc"
    "$HOME/.config/st/config.def.h"
    "$HOME/.config/dwm/config.def.h"
    "$HOME/.config/alacritty/alacritty.yml"
    "$HOME/.config/eww/"
    "$HOME/.config/slstatus/config.def.h"
    "$HOME/.config/stalonetrayrc"
    "$HOME/.config/nvim/lua/config/lazy.lua"
    "$HOME/.config/btop/btop.conf"
    "$HOME/.config/picom/picom.conf"
    "$HOME/.config/calcurse/conf"
    "$HOME/.config/dmenu/config.def.h"
    "$HOME/.config/dunst/dunstrc"
    "$HOME/.local/bin/"
  )

  SELECTED=$(printf '%s\n' "${CONFIGURATION_FILES[@]}" | fzf)
  "$EDITOR" "$SELECTED"
}

install_package() {
  paru -Slq | sed -e "s: :/:; s/ unknown-version//; /installerat/d" | fzf --multi --ansi --preview "paru -Si {1}" | xargs -ro paru --needed --ask 4 -Syu
}

uninstall_package() {
  paru -Qq | fzf --multi --preview 'paru -Si {1}' | xargs -ro paru -Rns --noconfirm
}

search_packages() {
  pacman -Qq | fzf | tr -d '\n' | xclip -selection clipboard
}

#░█▀▀░▀█▀░▀█▀
#░█░█░░█░░░█░
#░▀▀▀░▀▀▀░░▀░
fast-git() {
  git add .
  git commit -m "fast git"
  git push
}

#░█▀█░█▀▀░▀█▀░█░█░█▀█░█▀▄░█░█
#░█░█░█▀▀░░█░░█▄█░█░█░█▀▄░█▀▄
#░▀░▀░▀▀▀░░▀░░▀░▀░▀▀▀░▀░▀░▀░▀
open-ports() {
  sudo nmap -sS "$1" | grep -e 'report' -e 'PORT' -e 'open'
}

#░█▀█░█▀▄░█▀▀░█░█░▀█▀░█░█░█▀▀
#░█▀█░█▀▄░█░░░█▀█░░█░░▀▄▀░█▀▀
#░▀░▀░▀░▀░▀▀▀░▀░▀░▀▀▀░░▀░░▀▀▀
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

#░█▀█░█▀█░█░█░▀█▀░█▀▀░█▀█░▀█▀░▀█▀░█▀█░█▀█
#░█░█░█▀█░▀▄▀░░█░░█░█░█▀█░░█░░░█░░█░█░█░█
#░▀░▀░▀░▀░░▀░░▀▀▀░▀▀▀░▀░▀░░▀░░▀▀▀░▀▀▀░▀░▀
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}

# Goes up a specified number of directories  (i.e. up 4)
up() {
	local d=""
	limit=$1
	for ((i = 1; i <= limit; i++)); do
		d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}
